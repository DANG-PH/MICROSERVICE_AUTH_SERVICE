// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/auth.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface RegisterRequest {
  username: string;
  password: string;
  email: string;
  realname: string;
}

export interface RegisterResponse {
  success: boolean;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  sessionId: string;
}

export interface VerifyOtpRequest {
  sessionId: string;
  otp: string;
}

export interface VerifyOtpResponse {
  access_token: string;
  refresh_token: string;
}

export interface RefreshRequest {
  refreshToken: string;
}

export interface RefreshResponse {
  access_token: string;
}

export const AUTH_PACKAGE_NAME = "auth";

/** ===== SERVICE DEFINITION ===== */

export interface AuthServiceClient {
  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  verifyOtp(request: VerifyOtpRequest, metadata?: Metadata): Observable<VerifyOtpResponse>;

  refresh(request: RefreshRequest, metadata?: Metadata): Observable<RefreshResponse>;
}

/** ===== SERVICE DEFINITION ===== */

export interface AuthServiceController {
  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  verifyOtp(request: VerifyOtpRequest, metadata?: Metadata): Observable<VerifyOtpResponse>;

  refresh(request: RefreshRequest, metadata?: Metadata): Observable<RefreshResponse>;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "verifyOtp", "refresh"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
