// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: proto/auth.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

/** --- Register/Login/OTP/Refresh  --- */
export interface RegisterRequest {
  username: string;
  password: string;
  email: string;
  realname: string;
}

export interface RegisterResponse {
  success: boolean;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  sessionId: string;
}

export interface VerifyOtpRequest {
  sessionId: string;
  otp: string;
}

export interface VerifyOtpResponse {
  access_token: string;
  refresh_token: string;
}

export interface RefreshRequest {
  refreshToken: string;
}

export interface RefreshResponse {
  access_token: string;
}

/** --- User methods --- */
export interface ChangePasswordRequest {
  sessionId: string;
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  success: boolean;
}

export interface ResetPasswordRequest {
  username: string;
  otp: string;
  newPassword: string;
}

export interface ResetPasswordResponse {
  success: boolean;
}

export interface ChangeEmailRequest {
  sessionId: string;
  newEmail: string;
}

export interface ChangeEmailResponse {
  success: boolean;
}

/** --- Admin methods --- */
export interface ChangeRoleRequest {
  /** user target */
  username: string;
  newRole: string;
}

export interface ChangeRoleResponse {
  success: boolean;
}

export interface BanUserRequest {
  username: string;
}

export interface BanUserResponse {
  success: boolean;
}

export interface UnbanUserRequest {
  username: string;
}

export interface UnbanUserResponse {
  success: boolean;
}

/** --- Request OTP reset password --- */
export interface RequestResetPasswordRequest {
  username: string;
}

export interface RequestResetPasswordResponse {
  success: boolean;
}

export const AUTH_PACKAGE_NAME = "auth";

/** ===== SERVICE DEFINITION ===== */

export interface AuthServiceClient {
  /** user actions */

  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  verifyOtp(request: VerifyOtpRequest, metadata?: Metadata): Observable<VerifyOtpResponse>;

  refresh(request: RefreshRequest, metadata?: Metadata): Observable<RefreshResponse>;

  changePassword(request: ChangePasswordRequest, metadata?: Metadata): Observable<ChangePasswordResponse>;

  resetPassword(request: ResetPasswordRequest, metadata?: Metadata): Observable<ResetPasswordResponse>;

  requestResetPassword(
    request: RequestResetPasswordRequest,
    metadata?: Metadata,
  ): Observable<RequestResetPasswordResponse>;

  changeEmail(request: ChangeEmailRequest, metadata?: Metadata): Observable<ChangeEmailResponse>;

  /** admin actions */

  changeRole(request: ChangeRoleRequest, metadata?: Metadata): Observable<ChangeRoleResponse>;

  banUser(request: BanUserRequest, metadata?: Metadata): Observable<BanUserResponse>;

  unbanUser(request: UnbanUserRequest, metadata?: Metadata): Observable<UnbanUserResponse>;
}

/** ===== SERVICE DEFINITION ===== */

export interface AuthServiceController {
  /** user actions */

  register(request: RegisterRequest, metadata?: Metadata): Observable<RegisterResponse>;

  login(request: LoginRequest, metadata?: Metadata): Observable<LoginResponse>;

  verifyOtp(request: VerifyOtpRequest, metadata?: Metadata): Observable<VerifyOtpResponse>;

  refresh(request: RefreshRequest, metadata?: Metadata): Observable<RefreshResponse>;

  changePassword(request: ChangePasswordRequest, metadata?: Metadata): Observable<ChangePasswordResponse>;

  resetPassword(request: ResetPasswordRequest, metadata?: Metadata): Observable<ResetPasswordResponse>;

  requestResetPassword(
    request: RequestResetPasswordRequest,
    metadata?: Metadata,
  ): Observable<RequestResetPasswordResponse>;

  changeEmail(request: ChangeEmailRequest, metadata?: Metadata): Observable<ChangeEmailResponse>;

  /** admin actions */

  changeRole(request: ChangeRoleRequest, metadata?: Metadata): Observable<ChangeRoleResponse>;

  banUser(request: BanUserRequest, metadata?: Metadata): Observable<BanUserResponse>;

  unbanUser(request: UnbanUserRequest, metadata?: Metadata): Observable<UnbanUserResponse>;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "verifyOtp",
      "refresh",
      "changePassword",
      "resetPassword",
      "requestResetPassword",
      "changeEmail",
      "changeRole",
      "banUser",
      "unbanUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
